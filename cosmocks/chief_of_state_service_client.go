// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	chief_of_statev1 "github.com/chief-of-state/cos-go-sdk/cospb/chief_of_state/v1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ChiefOfStateServiceClient is an autogenerated mock type for the ChiefOfStateServiceClient type
type ChiefOfStateServiceClient struct {
	mock.Mock
}

// GetState provides a mock function with given fields: ctx, in, opts
func (_m *ChiefOfStateServiceClient) GetState(ctx context.Context, in *chief_of_statev1.GetStateRequest, opts ...grpc.CallOption) (*chief_of_statev1.GetStateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *chief_of_statev1.GetStateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.GetStateRequest, ...grpc.CallOption) *chief_of_statev1.GetStateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.GetStateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.GetStateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessCommand provides a mock function with given fields: ctx, in, opts
func (_m *ChiefOfStateServiceClient) ProcessCommand(ctx context.Context, in *chief_of_statev1.ProcessCommandRequest, opts ...grpc.CallOption) (*chief_of_statev1.ProcessCommandResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *chief_of_statev1.ProcessCommandResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.ProcessCommandRequest, ...grpc.CallOption) *chief_of_statev1.ProcessCommandResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.ProcessCommandResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.ProcessCommandRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChiefOfStateServiceClient creates a new instance of ChiefOfStateServiceClient. It also registers a cleanup function to assert the mocks expectations.
func NewChiefOfStateServiceClient(t testing.TB) *ChiefOfStateServiceClient {
	mock := &ChiefOfStateServiceClient{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
