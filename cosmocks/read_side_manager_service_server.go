// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	chief_of_statev1 "github.com/chief-of-state/cos-go-sdk/cospb/chief_of_state/v1"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ReadSideManagerServiceServer is an autogenerated mock type for the ReadSideManagerServiceServer type
type ReadSideManagerServiceServer struct {
	mock.Mock
}

// GetLatestOffset provides a mock function with given fields: _a0, _a1
func (_m *ReadSideManagerServiceServer) GetLatestOffset(_a0 context.Context, _a1 *chief_of_statev1.GetLatestOffsetRequest) (*chief_of_statev1.GetLatestOffsetResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chief_of_statev1.GetLatestOffsetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.GetLatestOffsetRequest) *chief_of_statev1.GetLatestOffsetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.GetLatestOffsetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.GetLatestOffsetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestOffsetByShard provides a mock function with given fields: _a0, _a1
func (_m *ReadSideManagerServiceServer) GetLatestOffsetByShard(_a0 context.Context, _a1 *chief_of_statev1.GetLatestOffsetByShardRequest) (*chief_of_statev1.GetLatestOffsetByShardResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chief_of_statev1.GetLatestOffsetByShardResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.GetLatestOffsetByShardRequest) *chief_of_statev1.GetLatestOffsetByShardResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.GetLatestOffsetByShardResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.GetLatestOffsetByShardRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseReadSide provides a mock function with given fields: _a0, _a1
func (_m *ReadSideManagerServiceServer) PauseReadSide(_a0 context.Context, _a1 *chief_of_statev1.PauseReadSideRequest) (*chief_of_statev1.PauseReadSideResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chief_of_statev1.PauseReadSideResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.PauseReadSideRequest) *chief_of_statev1.PauseReadSideResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.PauseReadSideResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.PauseReadSideRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseReadSideByShard provides a mock function with given fields: _a0, _a1
func (_m *ReadSideManagerServiceServer) PauseReadSideByShard(_a0 context.Context, _a1 *chief_of_statev1.PauseReadSideByShardRequest) (*chief_of_statev1.PauseReadSideByShardResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chief_of_statev1.PauseReadSideByShardResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.PauseReadSideByShardRequest) *chief_of_statev1.PauseReadSideByShardResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.PauseReadSideByShardResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.PauseReadSideByShardRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartReadSide provides a mock function with given fields: _a0, _a1
func (_m *ReadSideManagerServiceServer) RestartReadSide(_a0 context.Context, _a1 *chief_of_statev1.RestartReadSideRequest) (*chief_of_statev1.RestartReadSideResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chief_of_statev1.RestartReadSideResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.RestartReadSideRequest) *chief_of_statev1.RestartReadSideResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.RestartReadSideResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.RestartReadSideRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartReadSideByShard provides a mock function with given fields: _a0, _a1
func (_m *ReadSideManagerServiceServer) RestartReadSideByShard(_a0 context.Context, _a1 *chief_of_statev1.RestartReadSideByShardRequest) (*chief_of_statev1.RestartReadSideByShardResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chief_of_statev1.RestartReadSideByShardResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.RestartReadSideByShardRequest) *chief_of_statev1.RestartReadSideByShardResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.RestartReadSideByShardResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.RestartReadSideByShardRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeReadSide provides a mock function with given fields: _a0, _a1
func (_m *ReadSideManagerServiceServer) ResumeReadSide(_a0 context.Context, _a1 *chief_of_statev1.ResumeReadSideRequest) (*chief_of_statev1.ResumeReadSideResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chief_of_statev1.ResumeReadSideResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.ResumeReadSideRequest) *chief_of_statev1.ResumeReadSideResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.ResumeReadSideResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.ResumeReadSideRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeReadSideByShard provides a mock function with given fields: _a0, _a1
func (_m *ReadSideManagerServiceServer) ResumeReadSideByShard(_a0 context.Context, _a1 *chief_of_statev1.ResumeReadSideByShardRequest) (*chief_of_statev1.ResumeReadSideByShardResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chief_of_statev1.ResumeReadSideByShardResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.ResumeReadSideByShardRequest) *chief_of_statev1.ResumeReadSideByShardResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.ResumeReadSideByShardResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.ResumeReadSideByShardRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SkipOffset provides a mock function with given fields: _a0, _a1
func (_m *ReadSideManagerServiceServer) SkipOffset(_a0 context.Context, _a1 *chief_of_statev1.SkipOffsetRequest) (*chief_of_statev1.SkipOffsetResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chief_of_statev1.SkipOffsetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.SkipOffsetRequest) *chief_of_statev1.SkipOffsetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.SkipOffsetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.SkipOffsetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SkipOffsetByShard provides a mock function with given fields: _a0, _a1
func (_m *ReadSideManagerServiceServer) SkipOffsetByShard(_a0 context.Context, _a1 *chief_of_statev1.SkipOffsetByShardRequest) (*chief_of_statev1.SkipOffsetByShardResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *chief_of_statev1.SkipOffsetByShardResponse
	if rf, ok := ret.Get(0).(func(context.Context, *chief_of_statev1.SkipOffsetByShardRequest) *chief_of_statev1.SkipOffsetByShardResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chief_of_statev1.SkipOffsetByShardResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *chief_of_statev1.SkipOffsetByShardRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReadSideManagerServiceServer creates a new instance of ReadSideManagerServiceServer. It also registers a cleanup function to assert the mocks expectations.
func NewReadSideManagerServiceServer(t testing.TB) *ReadSideManagerServiceServer {
	mock := &ReadSideManagerServiceServer{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
