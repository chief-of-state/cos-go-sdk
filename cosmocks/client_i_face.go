// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package mocks

import (
	context "context"

	chief_of_statev1 "github.com/chief-of-state/cos-go-sdk/cospb/chief_of_state/v1"

	mock "github.com/stretchr/testify/mock"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// ClientIFace is an autogenerated mock type for the ClientIFace type
type ClientIFace[T protoreflect.ProtoMessage] struct {
	mock.Mock
}

// GetState provides a mock function with given fields: ctx, entityID
func (_m *ClientIFace[T]) GetState(ctx context.Context, entityID string) (T, *chief_of_statev1.MetaData, error) {
	ret := _m.Called(ctx, entityID)

	var r0 T
	if rf, ok := ret.Get(0).(func(context.Context, string) T); ok {
		r0 = rf(ctx, entityID)
	} else {
		r0 = ret.Get(0).(T)
	}

	var r1 *chief_of_statev1.MetaData
	if rf, ok := ret.Get(1).(func(context.Context, string) *chief_of_statev1.MetaData); ok {
		r1 = rf(ctx, entityID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*chief_of_statev1.MetaData)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, entityID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProcessCommand provides a mock function with given fields: ctx, entityID, command
func (_m *ClientIFace[T]) ProcessCommand(ctx context.Context, entityID string, command protoreflect.ProtoMessage) (T, *chief_of_statev1.MetaData, error) {
	ret := _m.Called(ctx, entityID, command)

	var r0 T
	if rf, ok := ret.Get(0).(func(context.Context, string, protoreflect.ProtoMessage) T); ok {
		r0 = rf(ctx, entityID, command)
	} else {
		r0 = ret.Get(0).(T)
	}

	var r1 *chief_of_statev1.MetaData
	if rf, ok := ret.Get(1).(func(context.Context, string, protoreflect.ProtoMessage) *chief_of_statev1.MetaData); ok {
		r1 = rf(ctx, entityID, command)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*chief_of_statev1.MetaData)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, protoreflect.ProtoMessage) error); ok {
		r2 = rf(ctx, entityID, command)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type NewClientIFaceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientIFace creates a new instance of ClientIFace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientIFace[T protoreflect.ProtoMessage](t NewClientIFaceT) *ClientIFace[T] {
	mock := &ClientIFace[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
