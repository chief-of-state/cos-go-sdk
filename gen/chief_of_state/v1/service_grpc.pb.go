// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: chief_of_state/v1/service.proto

package chief_of_statev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChiefOfStateServiceClient is the client API for ChiefOfStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChiefOfStateServiceClient interface {
	// Used to process command sent by an application
	ProcessCommand(ctx context.Context, in *ProcessCommandRequest, opts ...grpc.CallOption) (*ProcessCommandResponse, error)
	// Used to get the current state of that entity
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
}

type chiefOfStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChiefOfStateServiceClient(cc grpc.ClientConnInterface) ChiefOfStateServiceClient {
	return &chiefOfStateServiceClient{cc}
}

func (c *chiefOfStateServiceClient) ProcessCommand(ctx context.Context, in *ProcessCommandRequest, opts ...grpc.CallOption) (*ProcessCommandResponse, error) {
	out := new(ProcessCommandResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ChiefOfStateService/ProcessCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chiefOfStateServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ChiefOfStateService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChiefOfStateServiceServer is the server API for ChiefOfStateService service.
// All implementations should embed UnimplementedChiefOfStateServiceServer
// for forward compatibility
type ChiefOfStateServiceServer interface {
	// Used to process command sent by an application
	ProcessCommand(context.Context, *ProcessCommandRequest) (*ProcessCommandResponse, error)
	// Used to get the current state of that entity
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
}

// UnimplementedChiefOfStateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChiefOfStateServiceServer struct {
}

func (UnimplementedChiefOfStateServiceServer) ProcessCommand(context.Context, *ProcessCommandRequest) (*ProcessCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCommand not implemented")
}
func (UnimplementedChiefOfStateServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}

// UnsafeChiefOfStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChiefOfStateServiceServer will
// result in compilation errors.
type UnsafeChiefOfStateServiceServer interface {
	mustEmbedUnimplementedChiefOfStateServiceServer()
}

func RegisterChiefOfStateServiceServer(s grpc.ServiceRegistrar, srv ChiefOfStateServiceServer) {
	s.RegisterService(&ChiefOfStateService_ServiceDesc, srv)
}

func _ChiefOfStateService_ProcessCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChiefOfStateServiceServer).ProcessCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ChiefOfStateService/ProcessCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChiefOfStateServiceServer).ProcessCommand(ctx, req.(*ProcessCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChiefOfStateService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChiefOfStateServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ChiefOfStateService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChiefOfStateServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChiefOfStateService_ServiceDesc is the grpc.ServiceDesc for ChiefOfStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChiefOfStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chief_of_state.v1.ChiefOfStateService",
	HandlerType: (*ChiefOfStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessCommand",
			Handler:    _ChiefOfStateService_ProcessCommand_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _ChiefOfStateService_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chief_of_state/v1/service.proto",
}
