// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: chief_of_state/v1/readside_manager.proto

package chief_of_statev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReadSideManagerServiceClient is the client API for ReadSideManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadSideManagerServiceClient interface {
	// GetLatestOffset retrieves latest offset across all shards
	GetLatestOffset(ctx context.Context, in *GetLatestOffsetRequest, opts ...grpc.CallOption) (*GetLatestOffsetResponse, error)
	// GetLatestOffsetByShard retrieves the latest offset given a shard
	GetLatestOffsetByShard(ctx context.Context, in *GetLatestOffsetByShardRequest, opts ...grpc.CallOption) (*GetLatestOffsetByShardResponse, error)
	// RestartReadSide will clear the read side offset and start it over again
	// from the first offset and this across all shards
	RestartReadSide(ctx context.Context, in *RestartReadSideRequest, opts ...grpc.CallOption) (*RestartReadSideResponse, error)
	// RestartReadSideByShard will clear the read side offset for the given shard and start it over again from the first offset
	RestartReadSideByShard(ctx context.Context, in *RestartReadSideByShardRequest, opts ...grpc.CallOption) (*RestartReadSideByShardResponse, error)
	// PauseReadSide pauses a read side. This can be useful when running some data
	// migration and this across all shards
	PauseReadSide(ctx context.Context, in *PauseReadSideRequest, opts ...grpc.CallOption) (*PauseReadSideResponse, error)
	// PauseReadSide pauses a read side. This can be useful when running some data
	// migration and this for a given shard
	PauseReadSideByShard(ctx context.Context, in *PauseReadSideByShardRequest, opts ...grpc.CallOption) (*PauseReadSideByShardResponse, error)
	// ResumeReadSide resumes a paused read side and this across all shards
	ResumeReadSide(ctx context.Context, in *ResumeReadSideRequest, opts ...grpc.CallOption) (*ResumeReadSideResponse, error)
	// ResumeReadSideByShard  resumes a paused read side for a given shard
	ResumeReadSideByShard(ctx context.Context, in *ResumeReadSideByShardRequest, opts ...grpc.CallOption) (*ResumeReadSideByShardResponse, error)
	// SkippOffset skips the current offset to read across all shards and continue with next. The operation will automatically restart the read side.
	SkipOffset(ctx context.Context, in *SkipOffsetRequest, opts ...grpc.CallOption) (*SkipOffsetResponse, error)
	// SkippOffset skips the current offset to read for a given shard and continue with next. The operation will automatically restart the read side.
	SkipOffsetByShard(ctx context.Context, in *SkipOffsetByShardRequest, opts ...grpc.CallOption) (*SkipOffsetByShardResponse, error)
}

type readSideManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadSideManagerServiceClient(cc grpc.ClientConnInterface) ReadSideManagerServiceClient {
	return &readSideManagerServiceClient{cc}
}

func (c *readSideManagerServiceClient) GetLatestOffset(ctx context.Context, in *GetLatestOffsetRequest, opts ...grpc.CallOption) (*GetLatestOffsetResponse, error) {
	out := new(GetLatestOffsetResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ReadSideManagerService/GetLatestOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readSideManagerServiceClient) GetLatestOffsetByShard(ctx context.Context, in *GetLatestOffsetByShardRequest, opts ...grpc.CallOption) (*GetLatestOffsetByShardResponse, error) {
	out := new(GetLatestOffsetByShardResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ReadSideManagerService/GetLatestOffsetByShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readSideManagerServiceClient) RestartReadSide(ctx context.Context, in *RestartReadSideRequest, opts ...grpc.CallOption) (*RestartReadSideResponse, error) {
	out := new(RestartReadSideResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ReadSideManagerService/RestartReadSide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readSideManagerServiceClient) RestartReadSideByShard(ctx context.Context, in *RestartReadSideByShardRequest, opts ...grpc.CallOption) (*RestartReadSideByShardResponse, error) {
	out := new(RestartReadSideByShardResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ReadSideManagerService/RestartReadSideByShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readSideManagerServiceClient) PauseReadSide(ctx context.Context, in *PauseReadSideRequest, opts ...grpc.CallOption) (*PauseReadSideResponse, error) {
	out := new(PauseReadSideResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ReadSideManagerService/PauseReadSide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readSideManagerServiceClient) PauseReadSideByShard(ctx context.Context, in *PauseReadSideByShardRequest, opts ...grpc.CallOption) (*PauseReadSideByShardResponse, error) {
	out := new(PauseReadSideByShardResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ReadSideManagerService/PauseReadSideByShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readSideManagerServiceClient) ResumeReadSide(ctx context.Context, in *ResumeReadSideRequest, opts ...grpc.CallOption) (*ResumeReadSideResponse, error) {
	out := new(ResumeReadSideResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ReadSideManagerService/ResumeReadSide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readSideManagerServiceClient) ResumeReadSideByShard(ctx context.Context, in *ResumeReadSideByShardRequest, opts ...grpc.CallOption) (*ResumeReadSideByShardResponse, error) {
	out := new(ResumeReadSideByShardResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ReadSideManagerService/ResumeReadSideByShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readSideManagerServiceClient) SkipOffset(ctx context.Context, in *SkipOffsetRequest, opts ...grpc.CallOption) (*SkipOffsetResponse, error) {
	out := new(SkipOffsetResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ReadSideManagerService/SkipOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readSideManagerServiceClient) SkipOffsetByShard(ctx context.Context, in *SkipOffsetByShardRequest, opts ...grpc.CallOption) (*SkipOffsetByShardResponse, error) {
	out := new(SkipOffsetByShardResponse)
	err := c.cc.Invoke(ctx, "/chief_of_state.v1.ReadSideManagerService/SkipOffsetByShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadSideManagerServiceServer is the server API for ReadSideManagerService service.
// All implementations should embed UnimplementedReadSideManagerServiceServer
// for forward compatibility
type ReadSideManagerServiceServer interface {
	// GetLatestOffset retrieves latest offset across all shards
	GetLatestOffset(context.Context, *GetLatestOffsetRequest) (*GetLatestOffsetResponse, error)
	// GetLatestOffsetByShard retrieves the latest offset given a shard
	GetLatestOffsetByShard(context.Context, *GetLatestOffsetByShardRequest) (*GetLatestOffsetByShardResponse, error)
	// RestartReadSide will clear the read side offset and start it over again
	// from the first offset and this across all shards
	RestartReadSide(context.Context, *RestartReadSideRequest) (*RestartReadSideResponse, error)
	// RestartReadSideByShard will clear the read side offset for the given shard and start it over again from the first offset
	RestartReadSideByShard(context.Context, *RestartReadSideByShardRequest) (*RestartReadSideByShardResponse, error)
	// PauseReadSide pauses a read side. This can be useful when running some data
	// migration and this across all shards
	PauseReadSide(context.Context, *PauseReadSideRequest) (*PauseReadSideResponse, error)
	// PauseReadSide pauses a read side. This can be useful when running some data
	// migration and this for a given shard
	PauseReadSideByShard(context.Context, *PauseReadSideByShardRequest) (*PauseReadSideByShardResponse, error)
	// ResumeReadSide resumes a paused read side and this across all shards
	ResumeReadSide(context.Context, *ResumeReadSideRequest) (*ResumeReadSideResponse, error)
	// ResumeReadSideByShard  resumes a paused read side for a given shard
	ResumeReadSideByShard(context.Context, *ResumeReadSideByShardRequest) (*ResumeReadSideByShardResponse, error)
	// SkippOffset skips the current offset to read across all shards and continue with next. The operation will automatically restart the read side.
	SkipOffset(context.Context, *SkipOffsetRequest) (*SkipOffsetResponse, error)
	// SkippOffset skips the current offset to read for a given shard and continue with next. The operation will automatically restart the read side.
	SkipOffsetByShard(context.Context, *SkipOffsetByShardRequest) (*SkipOffsetByShardResponse, error)
}

// UnimplementedReadSideManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReadSideManagerServiceServer struct {
}

func (UnimplementedReadSideManagerServiceServer) GetLatestOffset(context.Context, *GetLatestOffsetRequest) (*GetLatestOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestOffset not implemented")
}
func (UnimplementedReadSideManagerServiceServer) GetLatestOffsetByShard(context.Context, *GetLatestOffsetByShardRequest) (*GetLatestOffsetByShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestOffsetByShard not implemented")
}
func (UnimplementedReadSideManagerServiceServer) RestartReadSide(context.Context, *RestartReadSideRequest) (*RestartReadSideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartReadSide not implemented")
}
func (UnimplementedReadSideManagerServiceServer) RestartReadSideByShard(context.Context, *RestartReadSideByShardRequest) (*RestartReadSideByShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartReadSideByShard not implemented")
}
func (UnimplementedReadSideManagerServiceServer) PauseReadSide(context.Context, *PauseReadSideRequest) (*PauseReadSideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseReadSide not implemented")
}
func (UnimplementedReadSideManagerServiceServer) PauseReadSideByShard(context.Context, *PauseReadSideByShardRequest) (*PauseReadSideByShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseReadSideByShard not implemented")
}
func (UnimplementedReadSideManagerServiceServer) ResumeReadSide(context.Context, *ResumeReadSideRequest) (*ResumeReadSideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeReadSide not implemented")
}
func (UnimplementedReadSideManagerServiceServer) ResumeReadSideByShard(context.Context, *ResumeReadSideByShardRequest) (*ResumeReadSideByShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeReadSideByShard not implemented")
}
func (UnimplementedReadSideManagerServiceServer) SkipOffset(context.Context, *SkipOffsetRequest) (*SkipOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipOffset not implemented")
}
func (UnimplementedReadSideManagerServiceServer) SkipOffsetByShard(context.Context, *SkipOffsetByShardRequest) (*SkipOffsetByShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipOffsetByShard not implemented")
}

// UnsafeReadSideManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadSideManagerServiceServer will
// result in compilation errors.
type UnsafeReadSideManagerServiceServer interface {
	mustEmbedUnimplementedReadSideManagerServiceServer()
}

func RegisterReadSideManagerServiceServer(s grpc.ServiceRegistrar, srv ReadSideManagerServiceServer) {
	s.RegisterService(&ReadSideManagerService_ServiceDesc, srv)
}

func _ReadSideManagerService_GetLatestOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSideManagerServiceServer).GetLatestOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ReadSideManagerService/GetLatestOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSideManagerServiceServer).GetLatestOffset(ctx, req.(*GetLatestOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadSideManagerService_GetLatestOffsetByShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestOffsetByShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSideManagerServiceServer).GetLatestOffsetByShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ReadSideManagerService/GetLatestOffsetByShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSideManagerServiceServer).GetLatestOffsetByShard(ctx, req.(*GetLatestOffsetByShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadSideManagerService_RestartReadSide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartReadSideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSideManagerServiceServer).RestartReadSide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ReadSideManagerService/RestartReadSide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSideManagerServiceServer).RestartReadSide(ctx, req.(*RestartReadSideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadSideManagerService_RestartReadSideByShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartReadSideByShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSideManagerServiceServer).RestartReadSideByShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ReadSideManagerService/RestartReadSideByShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSideManagerServiceServer).RestartReadSideByShard(ctx, req.(*RestartReadSideByShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadSideManagerService_PauseReadSide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseReadSideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSideManagerServiceServer).PauseReadSide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ReadSideManagerService/PauseReadSide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSideManagerServiceServer).PauseReadSide(ctx, req.(*PauseReadSideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadSideManagerService_PauseReadSideByShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseReadSideByShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSideManagerServiceServer).PauseReadSideByShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ReadSideManagerService/PauseReadSideByShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSideManagerServiceServer).PauseReadSideByShard(ctx, req.(*PauseReadSideByShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadSideManagerService_ResumeReadSide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeReadSideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSideManagerServiceServer).ResumeReadSide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ReadSideManagerService/ResumeReadSide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSideManagerServiceServer).ResumeReadSide(ctx, req.(*ResumeReadSideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadSideManagerService_ResumeReadSideByShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeReadSideByShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSideManagerServiceServer).ResumeReadSideByShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ReadSideManagerService/ResumeReadSideByShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSideManagerServiceServer).ResumeReadSideByShard(ctx, req.(*ResumeReadSideByShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadSideManagerService_SkipOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSideManagerServiceServer).SkipOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ReadSideManagerService/SkipOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSideManagerServiceServer).SkipOffset(ctx, req.(*SkipOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadSideManagerService_SkipOffsetByShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipOffsetByShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadSideManagerServiceServer).SkipOffsetByShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chief_of_state.v1.ReadSideManagerService/SkipOffsetByShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadSideManagerServiceServer).SkipOffsetByShard(ctx, req.(*SkipOffsetByShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReadSideManagerService_ServiceDesc is the grpc.ServiceDesc for ReadSideManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadSideManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chief_of_state.v1.ReadSideManagerService",
	HandlerType: (*ReadSideManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestOffset",
			Handler:    _ReadSideManagerService_GetLatestOffset_Handler,
		},
		{
			MethodName: "GetLatestOffsetByShard",
			Handler:    _ReadSideManagerService_GetLatestOffsetByShard_Handler,
		},
		{
			MethodName: "RestartReadSide",
			Handler:    _ReadSideManagerService_RestartReadSide_Handler,
		},
		{
			MethodName: "RestartReadSideByShard",
			Handler:    _ReadSideManagerService_RestartReadSideByShard_Handler,
		},
		{
			MethodName: "PauseReadSide",
			Handler:    _ReadSideManagerService_PauseReadSide_Handler,
		},
		{
			MethodName: "PauseReadSideByShard",
			Handler:    _ReadSideManagerService_PauseReadSideByShard_Handler,
		},
		{
			MethodName: "ResumeReadSide",
			Handler:    _ReadSideManagerService_ResumeReadSide_Handler,
		},
		{
			MethodName: "ResumeReadSideByShard",
			Handler:    _ReadSideManagerService_ResumeReadSideByShard_Handler,
		},
		{
			MethodName: "SkipOffset",
			Handler:    _ReadSideManagerService_SkipOffset_Handler,
		},
		{
			MethodName: "SkipOffsetByShard",
			Handler:    _ReadSideManagerService_SkipOffsetByShard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chief_of_state/v1/readside_manager.proto",
}
