// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: chief_of_state/v1/readside_manager.proto

package chief_of_statev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetReadSideLatestOffsetRequest helps retrieve the
// latest offset of a readside
type GetLatestOffsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the read side unique identifier
	ReadSideId string `protobuf:"bytes,1,opt,name=read_side_id,json=readSideId,proto3" json:"read_side_id,omitempty"`
}

func (x *GetLatestOffsetRequest) Reset() {
	*x = GetLatestOffsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestOffsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestOffsetRequest) ProtoMessage() {}

func (x *GetLatestOffsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestOffsetRequest.ProtoReflect.Descriptor instead.
func (*GetLatestOffsetRequest) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{0}
}

func (x *GetLatestOffsetRequest) GetReadSideId() string {
	if x != nil {
		return x.ReadSideId
	}
	return ""
}

type GetLatestOffsetByShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the read side unique identifier
	ReadSideId string `protobuf:"bytes,1,opt,name=read_side_id,json=readSideId,proto3" json:"read_side_id,omitempty"`
	// the cluster shard number
	ClusterShardNumber uint64 `protobuf:"varint,2,opt,name=cluster_shard_number,json=clusterShardNumber,proto3" json:"cluster_shard_number,omitempty"`
}

func (x *GetLatestOffsetByShardRequest) Reset() {
	*x = GetLatestOffsetByShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestOffsetByShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestOffsetByShardRequest) ProtoMessage() {}

func (x *GetLatestOffsetByShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestOffsetByShardRequest.ProtoReflect.Descriptor instead.
func (*GetLatestOffsetByShardRequest) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{1}
}

func (x *GetLatestOffsetByShardRequest) GetReadSideId() string {
	if x != nil {
		return x.ReadSideId
	}
	return ""
}

func (x *GetLatestOffsetByShardRequest) GetClusterShardNumber() uint64 {
	if x != nil {
		return x.ClusterShardNumber
	}
	return 0
}

type GetLatestOffsetByShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offsets *ReadSideOffset `protobuf:"bytes,1,opt,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *GetLatestOffsetByShardResponse) Reset() {
	*x = GetLatestOffsetByShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestOffsetByShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestOffsetByShardResponse) ProtoMessage() {}

func (x *GetLatestOffsetByShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestOffsetByShardResponse.ProtoReflect.Descriptor instead.
func (*GetLatestOffsetByShardResponse) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{2}
}

func (x *GetLatestOffsetByShardResponse) GetOffsets() *ReadSideOffset {
	if x != nil {
		return x.Offsets
	}
	return nil
}

// GetReadSideLatestOffsetResponse
type GetLatestOffsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the list of offset
	Offsets []*ReadSideOffset `protobuf:"bytes,1,rep,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *GetLatestOffsetResponse) Reset() {
	*x = GetLatestOffsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestOffsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestOffsetResponse) ProtoMessage() {}

func (x *GetLatestOffsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestOffsetResponse.ProtoReflect.Descriptor instead.
func (*GetLatestOffsetResponse) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{3}
}

func (x *GetLatestOffsetResponse) GetOffsets() []*ReadSideOffset {
	if x != nil {
		return x.Offsets
	}
	return nil
}

type RestartReadSideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the read side unique identifier
	ReadSideId string `protobuf:"bytes,1,opt,name=read_side_id,json=readSideId,proto3" json:"read_side_id,omitempty"`
}

func (x *RestartReadSideRequest) Reset() {
	*x = RestartReadSideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartReadSideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartReadSideRequest) ProtoMessage() {}

func (x *RestartReadSideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartReadSideRequest.ProtoReflect.Descriptor instead.
func (*RestartReadSideRequest) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{4}
}

func (x *RestartReadSideRequest) GetReadSideId() string {
	if x != nil {
		return x.ReadSideId
	}
	return ""
}

type RestartReadSideByShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the read side unique identifier
	ReadSideId string `protobuf:"bytes,1,opt,name=read_side_id,json=readSideId,proto3" json:"read_side_id,omitempty"`
	// the cluster shard number
	ClusterShardNumber uint64 `protobuf:"varint,2,opt,name=cluster_shard_number,json=clusterShardNumber,proto3" json:"cluster_shard_number,omitempty"`
}

func (x *RestartReadSideByShardRequest) Reset() {
	*x = RestartReadSideByShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartReadSideByShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartReadSideByShardRequest) ProtoMessage() {}

func (x *RestartReadSideByShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartReadSideByShardRequest.ProtoReflect.Descriptor instead.
func (*RestartReadSideByShardRequest) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{5}
}

func (x *RestartReadSideByShardRequest) GetReadSideId() string {
	if x != nil {
		return x.ReadSideId
	}
	return ""
}

func (x *RestartReadSideByShardRequest) GetClusterShardNumber() uint64 {
	if x != nil {
		return x.ClusterShardNumber
	}
	return 0
}

type RestartReadSideByShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// states whether the restart was successful
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *RestartReadSideByShardResponse) Reset() {
	*x = RestartReadSideByShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartReadSideByShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartReadSideByShardResponse) ProtoMessage() {}

func (x *RestartReadSideByShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartReadSideByShardResponse.ProtoReflect.Descriptor instead.
func (*RestartReadSideByShardResponse) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{6}
}

func (x *RestartReadSideByShardResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type RestartReadSideResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// states whether the restart was successful
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *RestartReadSideResponse) Reset() {
	*x = RestartReadSideResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartReadSideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartReadSideResponse) ProtoMessage() {}

func (x *RestartReadSideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartReadSideResponse.ProtoReflect.Descriptor instead.
func (*RestartReadSideResponse) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{7}
}

func (x *RestartReadSideResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type PauseReadSideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the read side unique identifier
	ReadSideId string `protobuf:"bytes,1,opt,name=read_side_id,json=readSideId,proto3" json:"read_side_id,omitempty"`
}

func (x *PauseReadSideRequest) Reset() {
	*x = PauseReadSideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseReadSideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseReadSideRequest) ProtoMessage() {}

func (x *PauseReadSideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseReadSideRequest.ProtoReflect.Descriptor instead.
func (*PauseReadSideRequest) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{8}
}

func (x *PauseReadSideRequest) GetReadSideId() string {
	if x != nil {
		return x.ReadSideId
	}
	return ""
}

type PauseReadSideByShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the read side unique identifier
	ReadSideId string `protobuf:"bytes,1,opt,name=read_side_id,json=readSideId,proto3" json:"read_side_id,omitempty"`
	// the cluster shard number
	ClusterShardNumber uint64 `protobuf:"varint,2,opt,name=cluster_shard_number,json=clusterShardNumber,proto3" json:"cluster_shard_number,omitempty"`
}

func (x *PauseReadSideByShardRequest) Reset() {
	*x = PauseReadSideByShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseReadSideByShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseReadSideByShardRequest) ProtoMessage() {}

func (x *PauseReadSideByShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseReadSideByShardRequest.ProtoReflect.Descriptor instead.
func (*PauseReadSideByShardRequest) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{9}
}

func (x *PauseReadSideByShardRequest) GetReadSideId() string {
	if x != nil {
		return x.ReadSideId
	}
	return ""
}

func (x *PauseReadSideByShardRequest) GetClusterShardNumber() uint64 {
	if x != nil {
		return x.ClusterShardNumber
	}
	return 0
}

type PauseReadSideByShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// states whether the pause request was successful
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *PauseReadSideByShardResponse) Reset() {
	*x = PauseReadSideByShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseReadSideByShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseReadSideByShardResponse) ProtoMessage() {}

func (x *PauseReadSideByShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseReadSideByShardResponse.ProtoReflect.Descriptor instead.
func (*PauseReadSideByShardResponse) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{10}
}

func (x *PauseReadSideByShardResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type PauseReadSideResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// states whether the pause request was successful
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *PauseReadSideResponse) Reset() {
	*x = PauseReadSideResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseReadSideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseReadSideResponse) ProtoMessage() {}

func (x *PauseReadSideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseReadSideResponse.ProtoReflect.Descriptor instead.
func (*PauseReadSideResponse) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{11}
}

func (x *PauseReadSideResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type ResumeReadSideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the read side unique identifier
	ReadSideId string `protobuf:"bytes,1,opt,name=read_side_id,json=readSideId,proto3" json:"read_side_id,omitempty"`
}

func (x *ResumeReadSideRequest) Reset() {
	*x = ResumeReadSideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeReadSideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeReadSideRequest) ProtoMessage() {}

func (x *ResumeReadSideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeReadSideRequest.ProtoReflect.Descriptor instead.
func (*ResumeReadSideRequest) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{12}
}

func (x *ResumeReadSideRequest) GetReadSideId() string {
	if x != nil {
		return x.ReadSideId
	}
	return ""
}

type ResumeReadSideByShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the read side unique identifier
	ReadSideId string `protobuf:"bytes,1,opt,name=read_side_id,json=readSideId,proto3" json:"read_side_id,omitempty"`
	// the cluster shard number
	ClusterShardNumber uint64 `protobuf:"varint,2,opt,name=cluster_shard_number,json=clusterShardNumber,proto3" json:"cluster_shard_number,omitempty"`
}

func (x *ResumeReadSideByShardRequest) Reset() {
	*x = ResumeReadSideByShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeReadSideByShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeReadSideByShardRequest) ProtoMessage() {}

func (x *ResumeReadSideByShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeReadSideByShardRequest.ProtoReflect.Descriptor instead.
func (*ResumeReadSideByShardRequest) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{13}
}

func (x *ResumeReadSideByShardRequest) GetReadSideId() string {
	if x != nil {
		return x.ReadSideId
	}
	return ""
}

func (x *ResumeReadSideByShardRequest) GetClusterShardNumber() uint64 {
	if x != nil {
		return x.ClusterShardNumber
	}
	return 0
}

type ResumeReadSideByShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// states whether the pause request was successful
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *ResumeReadSideByShardResponse) Reset() {
	*x = ResumeReadSideByShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeReadSideByShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeReadSideByShardResponse) ProtoMessage() {}

func (x *ResumeReadSideByShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeReadSideByShardResponse.ProtoReflect.Descriptor instead.
func (*ResumeReadSideByShardResponse) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{14}
}

func (x *ResumeReadSideByShardResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type ResumeReadSideResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// states whether the pause request was successful
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *ResumeReadSideResponse) Reset() {
	*x = ResumeReadSideResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeReadSideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeReadSideResponse) ProtoMessage() {}

func (x *ResumeReadSideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeReadSideResponse.ProtoReflect.Descriptor instead.
func (*ResumeReadSideResponse) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{15}
}

func (x *ResumeReadSideResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type SkipOffsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the read side unique identifier
	ReadSideId string `protobuf:"bytes,1,opt,name=read_side_id,json=readSideId,proto3" json:"read_side_id,omitempty"`
}

func (x *SkipOffsetRequest) Reset() {
	*x = SkipOffsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipOffsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipOffsetRequest) ProtoMessage() {}

func (x *SkipOffsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipOffsetRequest.ProtoReflect.Descriptor instead.
func (*SkipOffsetRequest) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{16}
}

func (x *SkipOffsetRequest) GetReadSideId() string {
	if x != nil {
		return x.ReadSideId
	}
	return ""
}

type SkipOffsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// states whether the pause request was successful
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *SkipOffsetResponse) Reset() {
	*x = SkipOffsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipOffsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipOffsetResponse) ProtoMessage() {}

func (x *SkipOffsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipOffsetResponse.ProtoReflect.Descriptor instead.
func (*SkipOffsetResponse) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{17}
}

func (x *SkipOffsetResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type SkipOffsetByShardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the read side unique identifier
	ReadSideId string `protobuf:"bytes,1,opt,name=read_side_id,json=readSideId,proto3" json:"read_side_id,omitempty"`
	// the cluster shard number
	ClusterShardNumber uint64 `protobuf:"varint,2,opt,name=cluster_shard_number,json=clusterShardNumber,proto3" json:"cluster_shard_number,omitempty"`
}

func (x *SkipOffsetByShardRequest) Reset() {
	*x = SkipOffsetByShardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipOffsetByShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipOffsetByShardRequest) ProtoMessage() {}

func (x *SkipOffsetByShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipOffsetByShardRequest.ProtoReflect.Descriptor instead.
func (*SkipOffsetByShardRequest) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{18}
}

func (x *SkipOffsetByShardRequest) GetReadSideId() string {
	if x != nil {
		return x.ReadSideId
	}
	return ""
}

func (x *SkipOffsetByShardRequest) GetClusterShardNumber() uint64 {
	if x != nil {
		return x.ClusterShardNumber
	}
	return 0
}

type SkipOffsetByShardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// states whether the pause request was successful
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *SkipOffsetByShardResponse) Reset() {
	*x = SkipOffsetByShardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipOffsetByShardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipOffsetByShardResponse) ProtoMessage() {}

func (x *SkipOffsetByShardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chief_of_state_v1_readside_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipOffsetByShardResponse.ProtoReflect.Descriptor instead.
func (*SkipOffsetByShardResponse) Descriptor() ([]byte, []int) {
	return file_chief_of_state_v1_readside_manager_proto_rawDescGZIP(), []int{19}
}

func (x *SkipOffsetByShardResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

var File_chief_of_state_v1_readside_manager_proto protoreflect.FileDescriptor

var file_chief_of_state_v1_readside_manager_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x68, 0x69, 0x65,
	0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x63,
	0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5d,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x22, 0x56, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x69, 0x65,
	0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x07, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49,
	0x64, 0x22, 0x73, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x39, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x22, 0x38, 0x0a, 0x14, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49, 0x64, 0x22, 0x71, 0x0a,
	0x1b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x3e, 0x0a, 0x1c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64,
	0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x22, 0x37, 0x0a, 0x15, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x39, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69,
	0x64, 0x65, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64,
	0x53, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x38, 0x0a, 0x16, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x22, 0x35, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x12, 0x53, 0x6b,
	0x69, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x22, 0x6e, 0x0a, 0x18, 0x53, 0x6b, 0x69, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x3b, 0x0a, 0x19, 0x53, 0x6b, 0x69, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x32, 0xf5, 0x08,
	0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x68,
	0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x30, 0x2e, 0x63,
	0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x68, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x16, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x68,
	0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77,
	0x0a, 0x14, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42,
	0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x69, 0x65,
	0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a,
	0x0a, 0x15, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65,
	0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x64, 0x65, 0x42, 0x79, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x53, 0x6b,
	0x69, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69,
	0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x70, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x69,
	0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6b, 0x69, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xd4, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68,
	0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x14, 0x52, 0x65, 0x61, 0x64, 0x73, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x68, 0x69, 0x65, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x68, 0x69, 0x65, 0x66, 0x4f,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x43, 0x68, 0x69, 0x65,
	0x66, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x68,
	0x69, 0x65, 0x66, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x43, 0x68, 0x69, 0x65,
	0x66, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chief_of_state_v1_readside_manager_proto_rawDescOnce sync.Once
	file_chief_of_state_v1_readside_manager_proto_rawDescData = file_chief_of_state_v1_readside_manager_proto_rawDesc
)

func file_chief_of_state_v1_readside_manager_proto_rawDescGZIP() []byte {
	file_chief_of_state_v1_readside_manager_proto_rawDescOnce.Do(func() {
		file_chief_of_state_v1_readside_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_chief_of_state_v1_readside_manager_proto_rawDescData)
	})
	return file_chief_of_state_v1_readside_manager_proto_rawDescData
}

var file_chief_of_state_v1_readside_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_chief_of_state_v1_readside_manager_proto_goTypes = []interface{}{
	(*GetLatestOffsetRequest)(nil),         // 0: chief_of_state.v1.GetLatestOffsetRequest
	(*GetLatestOffsetByShardRequest)(nil),  // 1: chief_of_state.v1.GetLatestOffsetByShardRequest
	(*GetLatestOffsetByShardResponse)(nil), // 2: chief_of_state.v1.GetLatestOffsetByShardResponse
	(*GetLatestOffsetResponse)(nil),        // 3: chief_of_state.v1.GetLatestOffsetResponse
	(*RestartReadSideRequest)(nil),         // 4: chief_of_state.v1.RestartReadSideRequest
	(*RestartReadSideByShardRequest)(nil),  // 5: chief_of_state.v1.RestartReadSideByShardRequest
	(*RestartReadSideByShardResponse)(nil), // 6: chief_of_state.v1.RestartReadSideByShardResponse
	(*RestartReadSideResponse)(nil),        // 7: chief_of_state.v1.RestartReadSideResponse
	(*PauseReadSideRequest)(nil),           // 8: chief_of_state.v1.PauseReadSideRequest
	(*PauseReadSideByShardRequest)(nil),    // 9: chief_of_state.v1.PauseReadSideByShardRequest
	(*PauseReadSideByShardResponse)(nil),   // 10: chief_of_state.v1.PauseReadSideByShardResponse
	(*PauseReadSideResponse)(nil),          // 11: chief_of_state.v1.PauseReadSideResponse
	(*ResumeReadSideRequest)(nil),          // 12: chief_of_state.v1.ResumeReadSideRequest
	(*ResumeReadSideByShardRequest)(nil),   // 13: chief_of_state.v1.ResumeReadSideByShardRequest
	(*ResumeReadSideByShardResponse)(nil),  // 14: chief_of_state.v1.ResumeReadSideByShardResponse
	(*ResumeReadSideResponse)(nil),         // 15: chief_of_state.v1.ResumeReadSideResponse
	(*SkipOffsetRequest)(nil),              // 16: chief_of_state.v1.SkipOffsetRequest
	(*SkipOffsetResponse)(nil),             // 17: chief_of_state.v1.SkipOffsetResponse
	(*SkipOffsetByShardRequest)(nil),       // 18: chief_of_state.v1.SkipOffsetByShardRequest
	(*SkipOffsetByShardResponse)(nil),      // 19: chief_of_state.v1.SkipOffsetByShardResponse
	(*ReadSideOffset)(nil),                 // 20: chief_of_state.v1.ReadSideOffset
}
var file_chief_of_state_v1_readside_manager_proto_depIdxs = []int32{
	20, // 0: chief_of_state.v1.GetLatestOffsetByShardResponse.offsets:type_name -> chief_of_state.v1.ReadSideOffset
	20, // 1: chief_of_state.v1.GetLatestOffsetResponse.offsets:type_name -> chief_of_state.v1.ReadSideOffset
	0,  // 2: chief_of_state.v1.ReadSideManagerService.GetLatestOffset:input_type -> chief_of_state.v1.GetLatestOffsetRequest
	1,  // 3: chief_of_state.v1.ReadSideManagerService.GetLatestOffsetByShard:input_type -> chief_of_state.v1.GetLatestOffsetByShardRequest
	4,  // 4: chief_of_state.v1.ReadSideManagerService.RestartReadSide:input_type -> chief_of_state.v1.RestartReadSideRequest
	5,  // 5: chief_of_state.v1.ReadSideManagerService.RestartReadSideByShard:input_type -> chief_of_state.v1.RestartReadSideByShardRequest
	8,  // 6: chief_of_state.v1.ReadSideManagerService.PauseReadSide:input_type -> chief_of_state.v1.PauseReadSideRequest
	9,  // 7: chief_of_state.v1.ReadSideManagerService.PauseReadSideByShard:input_type -> chief_of_state.v1.PauseReadSideByShardRequest
	12, // 8: chief_of_state.v1.ReadSideManagerService.ResumeReadSide:input_type -> chief_of_state.v1.ResumeReadSideRequest
	13, // 9: chief_of_state.v1.ReadSideManagerService.ResumeReadSideByShard:input_type -> chief_of_state.v1.ResumeReadSideByShardRequest
	16, // 10: chief_of_state.v1.ReadSideManagerService.SkipOffset:input_type -> chief_of_state.v1.SkipOffsetRequest
	18, // 11: chief_of_state.v1.ReadSideManagerService.SkipOffsetByShard:input_type -> chief_of_state.v1.SkipOffsetByShardRequest
	3,  // 12: chief_of_state.v1.ReadSideManagerService.GetLatestOffset:output_type -> chief_of_state.v1.GetLatestOffsetResponse
	2,  // 13: chief_of_state.v1.ReadSideManagerService.GetLatestOffsetByShard:output_type -> chief_of_state.v1.GetLatestOffsetByShardResponse
	7,  // 14: chief_of_state.v1.ReadSideManagerService.RestartReadSide:output_type -> chief_of_state.v1.RestartReadSideResponse
	6,  // 15: chief_of_state.v1.ReadSideManagerService.RestartReadSideByShard:output_type -> chief_of_state.v1.RestartReadSideByShardResponse
	11, // 16: chief_of_state.v1.ReadSideManagerService.PauseReadSide:output_type -> chief_of_state.v1.PauseReadSideResponse
	10, // 17: chief_of_state.v1.ReadSideManagerService.PauseReadSideByShard:output_type -> chief_of_state.v1.PauseReadSideByShardResponse
	15, // 18: chief_of_state.v1.ReadSideManagerService.ResumeReadSide:output_type -> chief_of_state.v1.ResumeReadSideResponse
	14, // 19: chief_of_state.v1.ReadSideManagerService.ResumeReadSideByShard:output_type -> chief_of_state.v1.ResumeReadSideByShardResponse
	17, // 20: chief_of_state.v1.ReadSideManagerService.SkipOffset:output_type -> chief_of_state.v1.SkipOffsetResponse
	19, // 21: chief_of_state.v1.ReadSideManagerService.SkipOffsetByShard:output_type -> chief_of_state.v1.SkipOffsetByShardResponse
	12, // [12:22] is the sub-list for method output_type
	2,  // [2:12] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_chief_of_state_v1_readside_manager_proto_init() }
func file_chief_of_state_v1_readside_manager_proto_init() {
	if File_chief_of_state_v1_readside_manager_proto != nil {
		return
	}
	file_chief_of_state_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chief_of_state_v1_readside_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestOffsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestOffsetByShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestOffsetByShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestOffsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartReadSideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartReadSideByShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartReadSideByShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartReadSideResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseReadSideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseReadSideByShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseReadSideByShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseReadSideResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeReadSideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeReadSideByShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeReadSideByShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeReadSideResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipOffsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipOffsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipOffsetByShardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chief_of_state_v1_readside_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipOffsetByShardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chief_of_state_v1_readside_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chief_of_state_v1_readside_manager_proto_goTypes,
		DependencyIndexes: file_chief_of_state_v1_readside_manager_proto_depIdxs,
		MessageInfos:      file_chief_of_state_v1_readside_manager_proto_msgTypes,
	}.Build()
	File_chief_of_state_v1_readside_manager_proto = out.File
	file_chief_of_state_v1_readside_manager_proto_rawDesc = nil
	file_chief_of_state_v1_readside_manager_proto_goTypes = nil
	file_chief_of_state_v1_readside_manager_proto_depIdxs = nil
}
